main.le
├─ external functions
│  ├─ 0
│  │  ├─ identifier
│  │  │  └─ `print_bool`
│  │  ├─ param_types
│  │  │  └─ type_identifier
│  │  │     └─ `bool`
│  │  └─ return_type
│  │     └─ type_identifier
│  │        └─ `i32`
│  ├─ 1
│  │  ├─ identifier
│  │  │  └─ `print_int32`
│  │  ├─ param_types
│  │  │  └─ type_identifier
│  │  │     └─ `i32`
│  │  └─ return_type
│  │     └─ type_identifier
│  │        └─ `i32`
│  ├─ 2
│  │  ├─ identifier
│  │  │  └─ `print_int64`
│  │  ├─ param_types
│  │  │  └─ type_identifier
│  │  │     └─ `i64`
│  │  └─ return_type
│  │     └─ type_identifier
│  │        └─ `i32`
│  ├─ 3
│  │  ├─ identifier
│  │  │  └─ `print_float32`
│  │  ├─ param_types
│  │  │  └─ type_identifier
│  │  │     └─ `f32`
│  │  └─ return_type
│  │     └─ type_identifier
│  │        └─ `i32`
│  └─ 4
│     ├─ identifier
│     │  └─ `print_float64`
│     ├─ param_types
│     │  └─ type_identifier
│     │     └─ `f64`
│     └─ return_type
│        └─ type_identifier
│           └─ `i32`
├─ function_definitions
│  ├─ 0
│  │  ├─ prototype
│  │  │  ├─ identifier
│  │  │  │  └─ `no_ret`
│  │  │  ├─ param_types
│  │  │  └─ return_type
│  │  │     └─ void
│  │  ├─ param_names
│  │  └─ body
│  │     └─ statements
│  │        └─ for_loop
│  │           ├─ condition
│  │           │  └─ expr
│  │           │     └─ binary_op_expr
│  │           │        ├─ left
│  │           │        │  └─ identifier
│  │           │        │     └─ `i`
│  │           │        ├─ operator
│  │           │        │  └─ ` <= `
│  │           │        └─ right
│  │           │           └─ number_literal
│  │           │              └─ `10`
│  │           ├─ init
│  │           │  └─ variable_definition
│  │           │     ├─ prototype
│  │           │     │  ├─ identifier
│  │           │     │  │  └─ `i`
│  │           │     │  └─ type
│  │           │     │     └─ `i`
│  │           │     └─ value
│  │           │        └─ number_literal
│  │           │           └─ `1`
│  │           ├─ iterate
│  │           │  └─ expr
│  │           │     └─ binary_op_expr
│  │           │        ├─ left
│  │           │        │  └─ identifier
│  │           │        │     └─ `i`
│  │           │        ├─ operator
│  │           │        │  └─ ` = `
│  │           │        └─ right
│  │           │           └─ binary_op_expr
│  │           │              ├─ left
│  │           │              │  └─ identifier
│  │           │              │     └─ `i`
│  │           │              ├─ operator
│  │           │              │  └─ ` + `
│  │           │              └─ right
│  │           │                 └─ number_literal
│  │           │                    └─ `1`
│  │           └─ code_block
│  │              └─ statements
│  │                 └─ expr
│  │                    └─ call_expr
│  │                       ├─ function_name
│  │                       │  └─ `print_int32`
│  │                       └─ right
│  │                          └─ identifier
│  │                             └─ `i`
│  ├─ 1
│  │  ├─ prototype
│  │  │  ├─ identifier
│  │  │  │  └─ `ret_i32`
│  │  │  ├─ param_types
│  │  │  │  └─ type_identifier
│  │  │  │     └─ `MyStruct`
│  │  │  └─ return_type
│  │  │     └─ type_identifier
│  │  │        └─ `i32`
│  │  ├─ param_names
│  │  │  └─ `number`
│  │  └─ body
│  │     └─ statements
│  │        └─ return_expr
│  │           └─ binary_op_expr
│  │              ├─ left
│  │              │  └─ identifier
│  │              │     └─ `number`
│  │              ├─ operator
│  │              │  └─ ` . `
│  │              └─ right
│  │                 └─ identifier
│  │                    └─ `member1`
│  ├─ 2
│  │  ├─ prototype
│  │  │  ├─ identifier
│  │  │  │  └─ `fibonacci`
│  │  │  ├─ param_types
│  │  │  │  └─ type_identifier
│  │  │  │     └─ `i32`
│  │  │  └─ return_type
│  │  │     └─ type_identifier
│  │  │        └─ `i32`
│  │  ├─ param_names
│  │  │  └─ `step`
│  │  └─ body
│  │     └─ statements
│  │        └─ if_statement
│  │           ├─ condition
│  │           │  └─ binary_op_expr
│  │           │     ├─ left
│  │           │     │  └─ identifier
│  │           │     │     └─ `step`
│  │           │     ├─ operator
│  │           │     │  └─ ` <= `
│  │           │     └─ right
│  │           │        └─ number_literal
│  │           │           └─ `3`
│  │           ├─ then_block
│  │           │  └─ statements
│  │           │     └─ return_expr
│  │           │        └─ number_literal
│  │           │           └─ `1`
│  │           └─ else_block
│  │              └─ statements
│  │                 └─ return_expr
│  │                    └─ binary_op_expr
│  │                       ├─ left
│  │                       │  └─ call_expr
│  │                       │     ├─ function_name
│  │                       │     │  └─ `fibonacci`
│  │                       │     └─ right
│  │                       │        └─ binary_op_expr
│  │                       │           ├─ left
│  │                       │           │  └─ identifier
│  │                       │           │     └─ `step`
│  │                       │           ├─ operator
│  │                       │           │  └─ ` - `
│  │                       │           └─ right
│  │                       │              └─ number_literal
│  │                       │                 └─ `1`
│  │                       ├─ operator
│  │                       │  └─ ` + `
│  │                       └─ right
│  │                          └─ call_expr
│  │                             ├─ function_name
│  │                             │  └─ `fibonacci`
│  │                             └─ right
│  │                                └─ binary_op_expr
│  │                                   ├─ left
│  │                                   │  └─ identifier
│  │                                   │     └─ `step`
│  │                                   ├─ operator
│  │                                   │  └─ ` - `
│  │                                   └─ right
│  │                                      └─ number_literal
│  │                                         └─ `2`
│  ├─ 3
│  │  ├─ prototype
│  │  │  ├─ identifier
│  │  │  │  └─ `ret_i32_1`
│  │  │  ├─ param_types
│  │  │  │  └─ type_identifier
│  │  │  │     └─ `i32`
│  │  │  └─ return_type
│  │  │     └─ type_identifier
│  │  │        └─ `i32`
│  │  ├─ param_names
│  │  │  └─ `number`
│  │  └─ body
│  │     └─ statements
│  │        ├─ while_loop
│  │        │  ├─ condition
│  │        │  │  └─ binary_op_expr
│  │        │  │     ├─ left
│  │        │  │     │  └─ identifier
│  │        │  │     │     └─ `number`
│  │        │  │     ├─ operator
│  │        │  │     │  └─ ` > `
│  │        │  │     └─ right
│  │        │  │        └─ number_literal
│  │        │  │           └─ `0`
│  │        │  └─ body
│  │        │     └─ statements
│  │        │        └─ if_statement
│  │        │           ├─ condition
│  │        │           │  └─ binary_op_expr
│  │        │           │     ├─ left
│  │        │           │     │  └─ identifier
│  │        │           │     │     └─ `number`
│  │        │           │     ├─ operator
│  │        │           │     │  └─ ` == `
│  │        │           │     └─ right
│  │        │           │        └─ number_literal
│  │        │           │           └─ `5`
│  │        │           ├─ then_block
│  │        │           │  └─ statements
│  │        │           │     └─ return_expr
│  │        │           │        └─ identifier
│  │        │           │           └─ `number`
│  │        │           └─ else_block
│  │        │              └─ statements
│  │        │                 └─ expr
│  │        │                    └─ binary_op_expr
│  │        │                       ├─ left
│  │        │                       │  └─ identifier
│  │        │                       │     └─ `number`
│  │        │                       ├─ operator
│  │        │                       │  └─ ` = `
│  │        │                       └─ right
│  │        │                          └─ binary_op_expr
│  │        │                             ├─ left
│  │        │                             │  └─ identifier
│  │        │                             │     └─ `number`
│  │        │                             ├─ operator
│  │        │                             │  └─ ` - `
│  │        │                             └─ right
│  │        │                                └─ number_literal
│  │        │                                   └─ `1`
│  │        └─ return_expr
│  │           └─ identifier
│  │              └─ `number`
│  ├─ 4
│  │  ├─ prototype
│  │  │  ├─ identifier
│  │  │  │  └─ `is_palindrome`
│  │  │  ├─ param_types
│  │  │  │  └─ type_identifier
│  │  │  │     └─ `i32`
│  │  │  └─ return_type
│  │  │     └─ type_identifier
│  │  │        └─ `bool`
│  │  ├─ param_names
│  │  │  └─ `x`
│  │  └─ body
│  │     └─ statements
│  │        ├─ if_statement
│  │        │  ├─ condition
│  │        │  │  └─ binary_op_expr
│  │        │  │     ├─ left
│  │        │  │     │  └─ binary_op_expr
│  │        │  │     │     ├─ left
│  │        │  │     │     │  └─ identifier
│  │        │  │     │     │     └─ `x`
│  │        │  │     │     ├─ operator
│  │        │  │     │     │  └─ ` <= `
│  │        │  │     │     └─ right
│  │        │  │     │        └─ number_literal
│  │        │  │     │           └─ `0`
│  │        │  │     ├─ operator
│  │        │  │     │  └─ ` || `
│  │        │  │     └─ right
│  │        │  │        └─ binary_op_expr
│  │        │  │           ├─ left
│  │        │  │           │  └─ binary_op_expr
│  │        │  │           │     ├─ left
│  │        │  │           │     │  └─ binary_op_expr
│  │        │  │           │     │     ├─ left
│  │        │  │           │     │     │  └─ identifier
│  │        │  │           │     │     │     └─ `x`
│  │        │  │           │     │     ├─ operator
│  │        │  │           │     │     │  └─ ` % `
│  │        │  │           │     │     └─ right
│  │        │  │           │     │        └─ number_literal
│  │        │  │           │     │           └─ `10`
│  │        │  │           │     ├─ operator
│  │        │  │           │     │  └─ ` == `
│  │        │  │           │     └─ right
│  │        │  │           │        └─ number_literal
│  │        │  │           │           └─ `0`
│  │        │  │           ├─ operator
│  │        │  │           │  └─ ` && `
│  │        │  │           └─ right
│  │        │  │              └─ binary_op_expr
│  │        │  │                 ├─ left
│  │        │  │                 │  └─ identifier
│  │        │  │                 │     └─ `x`
│  │        │  │                 ├─ operator
│  │        │  │                 │  └─ ` != `
│  │        │  │                 └─ right
│  │        │  │                    └─ number_literal
│  │        │  │                       └─ `0`
│  │        │  └─ then_block
│  │        │     └─ statements
│  │        │        └─ return_expr
│  │        │           └─ identifier
│  │        │              └─ `false`
│  │        ├─ variable_definition
│  │        │  ├─ prototype
│  │        │  │  ├─ identifier
│  │        │  │  │  └─ `revertedNumber`
│  │        │  │  └─ type
│  │        │  │     └─ `revertedNumber`
│  │        │  └─ value
│  │        │     └─ binary_op_expr
│  │        │        ├─ left
│  │        │        │  └─ identifier
│  │        │        │     └─ `x`
│  │        │        ├─ operator
│  │        │        │  └─ ` % `
│  │        │        └─ right
│  │        │           └─ number_literal
│  │        │              └─ `10`
│  │        ├─ while_loop
│  │        │  ├─ condition
│  │        │  │  └─ binary_op_expr
│  │        │  │     ├─ left
│  │        │  │     │  └─ identifier
│  │        │  │     │     └─ `x`
│  │        │  │     ├─ operator
│  │        │  │     │  └─ ` > `
│  │        │  │     └─ right
│  │        │  │        └─ identifier
│  │        │  │           └─ `revertedNumber`
│  │        │  └─ body
│  │        │     └─ statements
│  │        │        ├─ expr
│  │        │        │  └─ binary_op_expr
│  │        │        │     ├─ left
│  │        │        │     │  └─ identifier
│  │        │        │     │     └─ `revertedNumber`
│  │        │        │     ├─ operator
│  │        │        │     │  └─ ` = `
│  │        │        │     └─ right
│  │        │        │        └─ binary_op_expr
│  │        │        │           ├─ left
│  │        │        │           │  └─ binary_op_expr
│  │        │        │           │     ├─ left
│  │        │        │           │     │  └─ identifier
│  │        │        │           │     │     └─ `revertedNumber`
│  │        │        │           │     ├─ operator
│  │        │        │           │     │  └─ ` * `
│  │        │        │           │     └─ right
│  │        │        │           │        └─ number_literal
│  │        │        │           │           └─ `10`
│  │        │        │           ├─ operator
│  │        │        │           │  └─ ` + `
│  │        │        │           └─ right
│  │        │        │              └─ binary_op_expr
│  │        │        │                 ├─ left
│  │        │        │                 │  └─ identifier
│  │        │        │                 │     └─ `x`
│  │        │        │                 ├─ operator
│  │        │        │                 │  └─ ` % `
│  │        │        │                 └─ right
│  │        │        │                    └─ number_literal
│  │        │        │                       └─ `10`
│  │        │        └─ expr
│  │        │           └─ binary_op_expr
│  │        │              ├─ left
│  │        │              │  └─ identifier
│  │        │              │     └─ `x`
│  │        │              ├─ operator
│  │        │              │  └─ ` = `
│  │        │              └─ right
│  │        │                 └─ binary_op_expr
│  │        │                    ├─ left
│  │        │                    │  └─ identifier
│  │        │                    │     └─ `x`
│  │        │                    ├─ operator
│  │        │                    │  └─ ` / `
│  │        │                    └─ right
│  │        │                       └─ number_literal
│  │        │                          └─ `10`
│  │        └─ return_expr
│  │           └─ binary_op_expr
│  │              ├─ left
│  │              │  └─ binary_op_expr
│  │              │     ├─ left
│  │              │     │  └─ identifier
│  │              │     │     └─ `x`
│  │              │     ├─ operator
│  │              │     │  └─ ` == `
│  │              │     └─ right
│  │              │        └─ identifier
│  │              │           └─ `revertedNumber`
│  │              ├─ operator
│  │              │  └─ ` || `
│  │              └─ right
│  │                 └─ binary_op_expr
│  │                    ├─ left
│  │                    │  └─ identifier
│  │                    │     └─ `x`
│  │                    ├─ operator
│  │                    │  └─ ` == `
│  │                    └─ right
│  │                       └─ binary_op_expr
│  │                          ├─ left
│  │                          │  └─ identifier
│  │                          │     └─ `revertedNumber`
│  │                          ├─ operator
│  │                          │  └─ ` / `
│  │                          └─ right
│  │                             └─ number_literal
│  │                                └─ `10`
│  └─ 5
│     ├─ prototype
│     │  ├─ identifier
│     │  │  └─ `main`
│     │  ├─ param_types
│     │  └─ return_type
│     │     └─ type_identifier
│     │        └─ `i32`
│     ├─ param_names
│     └─ body
│        └─ statements
│           ├─ expr
│           │  └─ call_expr
│           │     ├─ function_name
│           │     │  └─ `no_ret`
│           │     └─ right
│           ├─ variable_definition
│           │  ├─ prototype
│           │  │  ├─ identifier
│           │  │  │  └─ `my_struct_object`
│           │  │  └─ type
│           │  │     └─ `my_struct_object`
│           │  └─ value
│           │     └─ struct_initializer
│           │        ├─ identifier
│           │        │  └─ `MyStruct`
│           │        └─ members
│           │           ├─ member1
│           │           │  └─ number_literal
│           │           │     └─ `999`
│           │           ├─ member2
│           │           │  └─ number_literal
│           │           │     └─ `1.234`
│           │           └─ member3
│           │              └─ array_initializer
│           │                 └─ elements
│           │                    ├─ number_literal
│           │                    │  └─ `1`
│           │                    └─ number_literal
│           │                       └─ `2`
│           ├─ expr
│           │  └─ binary_op_expr
│           │     ├─ left
│           │     │  └─ binary_op_expr
│           │     │     ├─ left
│           │     │     │  └─ identifier
│           │     │     │     └─ `my_struct_object`
│           │     │     ├─ operator
│           │     │     │  └─ ` . `
│           │     │     └─ right
│           │     │        └─ identifier
│           │     │           └─ `member2`
│           │     ├─ operator
│           │     │  └─ ` = `
│           │     └─ right
│           │        └─ number_literal
│           │           └─ `10`
│           ├─ variable_definition
│           │  ├─ prototype
│           │  │  ├─ identifier
│           │  │  │  └─ `return_i32_value`
│           │  │  └─ type
│           │  │     └─ `return_i32_value`
│           │  └─ value
│           │     └─ call_expr
│           │        ├─ function_name
│           │        │  └─ `ret_i32`
│           │        └─ right
│           │           └─ identifier
│           │              └─ `my_struct_object`
│           ├─ expr
│           │  └─ call_expr
│           │     ├─ function_name
│           │     │  └─ `print_int64`
│           │     └─ right
│           │        └─ binary_op_expr
│           │           ├─ left
│           │           │  └─ binary_op_expr
│           │           │     ├─ left
│           │           │     │  └─ identifier
│           │           │     │     └─ `my_struct_object`
│           │           │     ├─ operator
│           │           │     │  └─ ` . `
│           │           │     └─ right
│           │           │        └─ identifier
│           │           │           └─ `member2`
│           │           ├─ operator
│           │           │  └─ ` as `
│           │           └─ right
│           │              └─ identifier
│           │                 └─ `i64`
│           ├─ expr
│           │  └─ call_expr
│           │     ├─ function_name
│           │     │  └─ `print_int32`
│           │     └─ right
│           │        └─ call_expr
│           │           ├─ function_name
│           │           │  └─ `fibonacci`
│           │           └─ right
│           │              └─ number_literal
│           │                 └─ `20`
│           ├─ expr
│           │  └─ call_expr
│           │     ├─ function_name
│           │     │  └─ `print_int32`
│           │     └─ right
│           │        └─ call_expr
│           │           ├─ function_name
│           │           │  └─ `ret_i32_1`
│           │           └─ right
│           │              └─ number_literal
│           │                 └─ `6`
│           ├─ for_loop
│           │  ├─ condition
│           │  │  └─ expr
│           │  │     └─ binary_op_expr
│           │  │        ├─ left
│           │  │        │  └─ identifier
│           │  │        │     └─ `i`
│           │  │        ├─ operator
│           │  │        │  └─ ` <= `
│           │  │        └─ right
│           │  │           └─ number_literal
│           │  │              └─ `20`
│           │  ├─ init
│           │  │  └─ variable_definition
│           │  │     ├─ prototype
│           │  │     │  ├─ identifier
│           │  │     │  │  └─ `i`
│           │  │     │  └─ type
│           │  │     │     └─ `i`
│           │  │     └─ value
│           │  │        └─ number_literal
│           │  │           └─ `0`
│           │  ├─ iterate
│           │  │  └─ expr
│           │  │     └─ binary_op_expr
│           │  │        ├─ left
│           │  │        │  └─ identifier
│           │  │        │     └─ `i`
│           │  │        ├─ operator
│           │  │        │  └─ ` = `
│           │  │        └─ right
│           │  │           └─ binary_op_expr
│           │  │              ├─ left
│           │  │              │  └─ identifier
│           │  │              │     └─ `i`
│           │  │              ├─ operator
│           │  │              │  └─ ` + `
│           │  │              └─ right
│           │  │                 └─ number_literal
│           │  │                    └─ `1`
│           │  └─ code_block
│           │     └─ statements
│           │        └─ expr
│           │           └─ call_expr
│           │              ├─ function_name
│           │              │  └─ `print_bool`
│           │              └─ right
│           │                 └─ call_expr
│           │                    ├─ function_name
│           │                    │  └─ `is_palindrome`
│           │                    └─ right
│           │                       └─ identifier
│           │                          └─ `i`
│           └─ return_expr
│              └─ number_literal
│                 └─ `11111`
├─ globals_structures
│  └─ 0
│     ├─ identifier
│     │  └─ `MyStruct`
│     └─ members
│        ├─ member1
│        │  └─ type_identifier
│        │     └─ `i32`
│        ├─ member2
│        │  └─ type_identifier
│        │     └─ `f64`
│        └─ member3
│           └─ array_type
│              ├─ element_type
│              │  └─ type_identifier
│              │     └─ `i32`
│              └─ length
│                 └─ 2
└─ globals_variables
