##                 !!!!!!! Attention !!!!!!
## !!!!!! LELANG NOT SUPPORT UNICODE IDENTIFIER OR COMMENT NOW !!!!!!

decl le print_int(i64); ## external function declare
decl le print_float(f64);
## function with not return value
le no_ret(){
    for(var i:i32 = 1;i<10;i=i+1;){ ## for loop
        print_int(i);
    }
}
## structure declare
struct MyStruct{
    member1:i32,
    member2:f64,
    member3:[i32;2]
}

## function with return value, structure parameter,member access
le ret_i32(number:MyStruct)->i32{
    ret number.member1;
}

## recursive function, calculate fibonacci number
le fibonacci(step:u32)->u32{
    if(step<3){
        ret 1;
    }el{
        ret fibonacci(step-1)+fibonacci(step-2);
    }
}


le ret_i32_1(number:i32)->i32{
    while(number>0){ ## while loop and if else branch
        if (number==5){
            ret number;
        }el{
            number=number-1;
        }
    }
    ret number;
}

## leetcode test
le is_palindrome(x:i32)->bool {

        if (x < 0 || (x % 10 == 0 && x != 0)) {
            ret false;
        }

        var revertedNumber = 10.333%10;
        while (x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x = x / 10;
        }

        ret x == revertedNumber || x == revertedNumber / 10;
}


## main function and function all
le main()->i32{
    no_ret();
    var my_struct_object = MyStruct{
        member1:999,
        member2:1.234,
        member3:[1,2],
    };
    my_struct_object.member2=10;
    var return_i32_value = ret_i32(my_struct_object);
    print_int(my_struct_object.member2);
    print_int(fibonacci(20));
    print_int(ret_i32_1(6));
    for(var i =0;i<20;i=i+1;){
        print_int(is_palindrome(i));
    }
    ret 0;
}


